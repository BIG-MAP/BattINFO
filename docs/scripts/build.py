"""Build documentation.

This script builds the documentation using the generated HTML files from the
md_to_html.py script and the CSS and other assets.

Usage:

    python build.py <output_path>

The output path is the directory where the documentation will be built.
It should be written in POSIX style, i.e., using forward slashes as path separators.

Files and folders in the output path will be overwritten according to the current
source files. Files and folders that are not generated by this script or sub-scripts
will be left untouched.

If given as a relative path, it will be interpreted as being relative to the root of
the repository. Example of a relative path: docs/html
If given as an absolute path, it will be used as is. Example of an absolute path:
/home/user/website

It is recommended to give the output path as a relative path on Windows.

Examples:
    python build.py site
    python build.py docs/html
    python build.py /home/user/website

"""
from pathlib import Path, PurePosixPath
import shutil
import sys

from md_to_html import rendering_workflow

REPO_ROOT = Path(__file__).resolve().parent.parent.parent.resolve()
KNOWN_REPO_FOLDERS = [".git", ".github", "docs"]
STATIC_DOCS_FOLDERS = ["assets", "css"]


class Abort(Exception):
    """Abort execution. but keep a 0 exit code (i.e., successful)."""


def _remove_folder(folder: Path) -> None:
    """Remove a folder recursively."""
    for child in folder.iterdir():
        if child.is_dir():
            _remove_folder(child)
        else:
            child.unlink()
    folder.rmdir()


def build(output_folder: Path) -> None:
    """Build documentation."""
    # (Re)create output folder
    output_folder.mkdir(parents=True, exist_ok=True)

    # Copy static folders
    for folder in STATIC_DOCS_FOLDERS:
        (output_folder / folder).mkdir(exist_ok=True)
        for child in (REPO_ROOT / "docs" / folder).iterdir():
            shutil.copyfile(child, output_folder / folder / child.name)

    # Run md_to_html.py - Generating HTML files from all Markdown files
    rendering_workflow(output_folder)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        sys.exit("Usage: python build.py <output_path>")

    output_path = Path(PurePosixPath(sys.argv[1]))
    if not output_path.is_absolute():
        # Relative path - Must be relative to the repository root
        output_path = (REPO_ROOT / output_path).resolve()

    try:
        build(output_path)
    except KeyboardInterrupt:
        sys.exit("Keyboard interrupt. Exiting...")
    except Abort as exc:
        print(f"Aborting: {exc}")
        sys.exit()
    except Exception as exc:
        sys.exit(f"Error: {exc}")
